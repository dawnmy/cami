name: release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch: {}  # allow manual runs from branches for dry-run builds

permissions:
  contents: write

env:
  BIN_NAME: cami

jobs:
  build:
    name: build (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            pkgext: tar.gz
          - os: macos-14
            target: aarch64-apple-darwin
            pkgext: tar.gz
          - os: macos-13
            target: x86_64-apple-darwin
            pkgext: tar.gz

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Ensure jq is available (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Read version from Cargo.toml
        id: ver
        shell: bash
        run: |
          VERSION=$(cargo metadata --format-version=1 --no-deps -q | jq -r '.packages[] | select(.name=="cami") | .version')
          if [ -z "$VERSION" ] || [ "$VERSION" = "null" ]; then
            echo "Failed to get version for cami from cargo metadata"; exit 1
          fi
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

          # Enforce tag==version only on tag pushes
          if [ "${GITHUB_EVENT_NAME}" = "push" ] && [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            TAG="${GITHUB_REF_NAME}"  # e.g. v0.1.2
            if [ "$TAG" != "v$VERSION" ]; then
              echo "Tag ($TAG) does not match Cargo.toml version (v$VERSION)"; exit 1
            fi
          fi

      - name: Build (release)
        shell: bash
        env:
          RUST_BACKTRACE: "1"
        run: |
          rustc --version
          cargo --version
          cargo build --release --locked --target ${{ matrix.target }} -vv

      - name: Package
        shell: bash
        run: |
          VER="${{ steps.ver.outputs.version }}"
          NAME="${BIN_NAME}-v${VER}-${{ matrix.target }}"
          OUTDIR="dist/${NAME}"
          mkdir -p "${OUTDIR}"

          BIN="target/${{ matrix.target }}/release/${BIN_NAME}"
          cp "${BIN}" "${OUTDIR}/"  # (no .exe on these targets)

          # Best-effort strip to reduce size
          strip "${OUTDIR}/${BIN_NAME}" || true

          # Include docs if present
          [ -f LICENSE ] && cp LICENSE "${OUTDIR}/" || true
          [ -f README.md ] && cp README.md "${OUTDIR}/" || true

          # Archive
          (cd dist && tar czf "${NAME}.tar.gz" "${NAME}")
          FILE="dist/${NAME}.tar.gz"

          # Checksums (macOS has shasum; Linux has sha256sum)
          (shasum -a 256 "$FILE" || sha256sum "$FILE") > "${FILE}.sha256"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: dist/*

  release:
    name: publish
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')  # only publish on tags
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Flatten artifacts
        shell: bash
        run: |
          mkdir -p upload
          find dist -type f -print -exec cp {} upload/ \;

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: upload/*
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
